generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String
  name          String
  username      String
  level         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  followers     Int            @default(0)
  followings    Int            @default(0)
  github        String?
  instagram     String?
  linkedin      String?
  password      String?
  role          Roles[]        @default([])
  imageUrl      String?
  lastLogin     DateTime?
  isDisabled    Boolean?       @default(false)
  isPublicEmail Boolean?       @default(false)
  location      String?
  position      Positions?
  trail         Trail?
  comments      Comment[]
  commentLikes  CommentLike[]
  likes         Like[]
  notes         Note[]
  posts         Post[]
  ScoreHistory  ScoreHistory[]
  Scoreboard    Scoreboard[]
  interests     UserInterest[]
  noteSupports  NoteSupport[]
}

model UserFollowersAndFollowing {
  id        String   @id @default(uuid())
  targetId  String   @map("follow_user_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id                      String    @id @default(uuid())
  title                   String
  content                 Json
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  categoryId              String
  userId                  String
  isPinned                Boolean?  @default(false)
  discordWebhookMessageID String?
  comments                Comment[]
  likes                   Like[]
  category                Category  @relation(fields: [categoryId], references: [id])
  user                    User      @relation(fields: [userId], references: [id])
}

model Comment {
  id        String        @id @default(uuid())
  comment   String
  userId    String
  videoId   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  commentId String?
  postId    String?
  replyToId String?
  post      Post?         @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  user      User          @relation(fields: [userId], references: [id])
  video     Video?        @relation(fields: [videoId], references: [id], onDelete: Cascade)
  likes     CommentLike[]
}

model Like {
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

model CommentLike {
  userId    String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

model Classroom {
  id          String            @id @default(uuid())
  title       String            @unique
  permissions Roles[]           @default([])
  createdAt   DateTime          @default(now())
  order       Int?
  modules     ClassroomModule[]
}

model ClassroomModule {
  id          String    @id @default(uuid())
  title       String
  classroomId String
  fileUrl     String?
  order       Int?
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  videos      Video[]
}

model Video {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  description       String?
  title             String
  url               String
  classroomModuleId String?
  order             Int?
  attachments       Attachment[]
  comments          Comment[]
  classroomModule   ClassroomModule? @relation(fields: [classroomModuleId], references: [id])
}

model Attachment {
  id      String @id @default(uuid())
  name    String
  type    String
  size    Int
  url     String
  videoId String
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Season {
  id                  String               @id @default(cuid())
  name                String
  initDate            DateTime
  endDate             DateTime
  isCurrent           Boolean
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  metadata            Json?
  histories           ScoreHistory[]
  scores              Scoreboard[]
  positionMultipliers PositionMultiplier[]
}

model PositionMultiplier {
  id         String    @id @default(cuid())
  seasonId   String
  position   Positions
  multiplier Float     @default(1.0)

  season Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  @@unique([seasonId, position])
}

model Scoreboard {
  id       String @id @default(cuid())
  userId   String
  points   Float  @default(0)
  seasonId String
  season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, seasonId])
}

model ScoreHistory {
  id         String        @id @default(cuid())
  userId     String
  targetId   String?
  createdAt  DateTime      @default(now())
  resourceId String
  points     Float
  multiplier Float         @default(1.0)
  seasonId   String
  isManual   Boolean       @default(false)
  metadata   Json?
  resource   AwardResource @relation(fields: [resourceId], references: [id])
  season     Season        @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id])
}

model AwardResource {
  id        String         @id @default(cuid())
  resource  AwardEnum      @unique
  baseScore Float
  disabled  Boolean        @default(false)
  histories ScoreHistory[]
}

model Interest {
  id        String         @id @default(uuid())
  interest  String         @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  users     UserInterest[]
}

model UserInterest {
  userId     String
  interestId String
  user       User     @relation(fields: [userId], references: [id])
  interest   Interest @relation(fields: [interestId], references: [id])

  @@id([userId, interestId])
}

model Course {
  id         String           @id @default(uuid())
  name       String
  courseUrl  String
  level      String
  categoryId String
  isPaid     Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  isPending  Boolean          @default(false)
  category   Category         @relation("CourseToCategory", fields: [categoryId], references: [id])
  categories CourseCategory[]
}

model Category {
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  id             String           @id @default(uuid())
  courses        Course[]         @relation("CourseToCategory")
  courseCategory CourseCategory[]
  posts          Post[]
}

model CourseCategory {
  courseId   String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id])

  @@id([courseId, categoryId])
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  isPublic  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  supports  NoteSupport[]
}

model NoteSupport {
  id        String   @id @default(uuid())
  userId    String
  noteId    String
  note      Note     @relation(fields: [noteId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, noteId])
}

model Event {
  id           String   @id @default(uuid())
  title        String
  description  String
  date         DateTime
  location     String
  externalUrl  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  specialGuest String?
  allowedRoles Roles[]  @default([ProgramadorSemPatria])
}

enum Roles {
  PrePsp
  PreBase
  Base
  ProgramadorSemPatria
  Prime
  Admin
}

enum Positions {
  AMBASSADOR
  BUILDER
  PSP
  BASE
  ADMIN
}

enum Trail {
  FULL_STACK_JS_FRONT
  FULL_STACK_JS_NODE
  FULL_STACK_PY_BE
  BE_NODEJS
  BE_PYTHON
  DATA_SCIENCE
  DATA_ENGINEER
  AI_ENGINEER
}

enum AwardEnum {
  FORUM_POST_LIKE
  FORUM_POST_COMMENT_LIKE
  COURSE_RECOMMENDATION
}
