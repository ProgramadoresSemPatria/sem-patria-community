name: Cypress Tests

on:
  pull_request:
    branches:
      - staging

jobs:
  cypress-run:
    runs-on: ubuntu-22.04

    env:
      UPLOADTHING_SECRET: ${{ secrets.UPLOADTHING_SECRET }}
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
      BASE_URL_PRODUCTION: ${{ secrets.BASE_URL_PRODUCTION }}
      BASE_URL_DEVELOPMENT: ${{ secrets.BASE_URL_DEVELOPMENT }}
      CLERK_TESTING_TOKEN: ${{ secrets.CLERK_TESTING_TOKEN }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 List Repository Files
        run: ls -al

      - name: 📄 Create `.env` File
        run: |
          echo "UPLOADTHING_SECRET=$UPLOADTHING_SECRET" >> .env
           echo "RESEND_API_KEY=$RESEND_API_KEY" >> .env
           echo "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" >> .env
           echo "BASE_URL_PRODUCTION=$BASE_URL_PRODUCTION" >> .env
           echo "BASE_URL_DEVELOPMENT=$BASE_URL_DEVELOPMENT" >> .env
           echo "CLERK_TESTING_TOKEN=$CLERK_TESTING_TOKEN" >> .env
           echo "POSTGRES_USER=$POSTGRES_USER" >> .env
           echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
           echo "POSTGRES_HOST=$POSTGRES_HOST" >> .env
           echo "POSTGRES_PORT=$POSTGRES_PORT" >> .env
           echo "POSTGRES_DB=$POSTGRES_DB" >> .env
           echo "DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD}@sem-patria-local-db:5432/${POSTGRES_DB}" >> .env
        shell: bash

      - name: 📦 Install pnpm
        run: npm install -g pnpm

      - name: 📦 Install Dependencies
        run: pnpm install --no-frozen-lockfile

      - name: 🔍 Debug Check if `docker-compose.yaml` Exists
        run: ls -al $GITHUB_WORKSPACE/src/infra || echo "🚨 src/infra/ directory not found!"

      - name: 🐳 Start Docker Services (Without Build)
        run: |
          docker network create my_network || true
          docker compose --env-file .env -f $GITHUB_WORKSPACE/src/infra/docker-compose.yaml up -d

      - name: 🔍 Check Running Containers
        run: docker ps -a

      - name: 📜 Inspect PostgreSQL Logs
        run: docker logs sem-patria-local-db || true

      - name: ⏳ Wait for PostgreSQL to be Ready
        run: |
          echo "Waiting for PostgreSQL..."
          until docker exec sem-patria-local-db pg_isready -U myuser; do
            sleep 2
          done
          echo "✅ PostgreSQL is ready."

      - name: ⏳ Ensure Prisma Can Connect to PostgreSQL
        run: |
          echo "Checking if Prisma can connect..."
          until pnpm exec prisma db execute --file=/dev/null --url=$DATABASE_URL; do
            echo "Waiting for database..."
            sleep 5
          done
          echo "✅ Prisma is ready."

      - name: 🌱 Seed Database
        run: pnpm seed

      - name: ⚡ Build Next.js App
        run: pnpm build

      - name: 🚀 Start Next.js Server in Docker
        run: |
          pnpm start > nextjs.log 2>&1 &

      - name: ⏳ Wait for Next.js to be Ready
        run: pnpx wait-on http://localhost:3000 --timeout 60000

      - name: 📜 Print Next.js Logs
        run: cat nextjs.log

      - name: 🧪 Run Cypress Tests
        uses: cypress-io/github-action@v6
        with:
          build: pnpm build
          start: pnpm start
          wait-on: http://localhost:3000
          browser: chrome
          headless: true
