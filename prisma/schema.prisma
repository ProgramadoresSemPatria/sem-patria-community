generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  PerfilFechado
  PortifolioBoostProgram
  Base
  ProgramadorSemPatria
  Prime
  Builder
  Admin
}

model User {
  id         String    @id @default(uuid())
  email      String
  password   String?
  name       String
  username   String
  level      String?
  role       Roles[]   @default([])
  github     String?
  linkedin   String?
  instagram  String?
  imageUrl   String?
  followers  Int       @default(0)
  followings Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  lastLogin  DateTime?
  Notes      Note[]
  Comment    Comment[]
  Like       Like[]
}

model Course {
  id         String   @id @default(uuid())
  name       String
  courseUrl  String
  level      String
  categoryId String
  isPaid     Boolean  @default(false)
  isPending  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation("CourseToCategory", fields: [categoryId], references: [id])
}

model Category {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courses   Course[] @relation("CourseToCategory")
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Event {
  id           String   @id @default(uuid())
  title        String
  description  String
  specialGuest String?
  date         DateTime
  location     String
  externalUrl  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Classroom {
  id          String            @id @default(uuid())
  title       String            @unique
  modules     ClassroomModule[]
  permissions Roles[]           @default([])
  createdAt   DateTime          @default(now())
}

model ClassroomModule {
  id          String    @id @default(uuid())
  title       String
  videos      Video[]
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String
}

model Video {
  id                String           @id @default(uuid())
  title             String
  description       String?
  url               String
  comments          Comment[]
  createdAt         DateTime         @default(now())
  ClassroomModule   ClassroomModule? @relation(fields: [classroomModuleId], references: [id])
  classroomModuleId String?
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  likes     Like[]
  video     Video    @relation(fields: [videoId], references: [id])
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  createdAt DateTime @default(now())
}
