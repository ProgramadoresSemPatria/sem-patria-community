generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Positions {
  AMBASSADOR
  BUILDER
  PSP
  BASE
  ADMIN
}

model User {
  id            String     @id @default(uuid())
  email         String
  name          String
  username      String     @unique
  level         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  followers     Int        @default(0)
  followings    Int        @default(0)
  github        String?
  instagram     String?
  linkedin      String?
  password      String?
  role          Roles[]    @default([])
  imageUrl      String?
  lastLogin     DateTime?
  isDisabled    Boolean?   @default(false)
  isPublicEmail Boolean?   @default(false)
  position      Positions?
  location      String?
  comments     Comment[]
  commentLikes CommentLike[]
  likes        Like[]
  notes        Note[] 
  posts        Post[]
  interests Interest[] 
}

model Interest {
  id              String   @id @default(uuid())
  interest String @unique
  users User[]
  createdAt       DateTime @default(now()) 
  updatedAt       DateTime @updatedAt  
}

model Course {
  id         String           @id @default(uuid())
  name       String
  courseUrl  String
  level      String
  categoryId String
  isPaid     Boolean          @default(false)
  isPending  Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  category   Category         @relation("CourseToCategory", fields: [categoryId], references: [id])
  categories CourseCategory[]
}

model Category {
  id             String           @id @default(uuid())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  courses        Course[]         @relation("CourseToCategory")
  courseCategory CourseCategory[]
  posts          Post[]
}

model CourseCategory {
  courseId   String
  categoryId String
  course     Course   @relation(fields: [courseId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([courseId, categoryId])
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  isPublic  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

model Event {
  id           String   @id @default(uuid())
  title        String
  description  String
  date         DateTime
  location     String
  externalUrl  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  specialGuest String?
}

model Classroom {
  id          String            @id @default(uuid())
  title       String            @unique
  permissions Roles[]           @default([])
  createdAt   DateTime          @default(now())
  modules     ClassroomModule[]
}

model ClassroomModule {
  id          String    @id @default(uuid())
  title       String
  classroomId String
  fileUrl     String?
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  videos      Video[]
}

model Video {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  description       String?
  title             String
  url               String
  classroomModuleId String?
  order             Int?
  attachments       Attachment[]
  comments          Comment[]
  classroomModule   ClassroomModule? @relation(fields: [classroomModuleId], references: [id])
}

model Attachment {
  id      String @id @default(uuid())
  name    String
  type    String
  size    Int
  url     String
  videoId String
  video   Video  @relation(fields: [videoId], references: [id])
}

model Post {
  id                      String   @id @default(uuid())
  title                   String
  content                 Json
  isPinned                Boolean? @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  discordWebhookMessageID String?
  category                Category @relation(fields: [categoryId], references: [id])
  categoryId              String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  comments Comment[]
  likes    Like[]
}

model Comment {
  id        String        @id @default(uuid())
  comment   String
  userId    String
  videoId   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  commentId String?
  postId    String?
  replyToId String?
  post      Post?         @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies   Comment[]     @relation("ReplyTo")
  user      User          @relation(fields: [userId], references: [id])
  video     Video?        @relation(fields: [videoId], references: [id], onDelete: Cascade)
  likes     CommentLike[]
}

model Like {
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

model CommentLike {
  userId    String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}



enum Roles {
  PrePsp
  PerfilFechado
  PortifolioBoostProgram
  Base
  ProgramadorSemPatria
  Prime
  Builder
  Admin
}


model UserFollowersAndFollowing {
  id        String   @id @default(uuid())
  targetId  String   @map("follow_user_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
