generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Roles {
  PerfilFechado
  PortifolioBoostProgram
  Base
  ProgramadorSemPatria
  Prime
  Builder
  Admin
}

model User {
  id           String        @id @default(uuid())
  email        String
  password     String?
  name         String
  username     String
  level        String?
  role         Roles[]       @default([])
  github       String?
  linkedin     String?
  instagram    String?
  imageUrl     String?
  followers    Int           @default(0)
  followings   Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lastLogin    DateTime?
  isDisabled   Boolean?      @default(false)
  notes        Note[]
  comments     Comment[]
  likes        Like[]
  commentLikes CommentLike[]
  posts        Post[]
}

model Course {
  id         String           @id @default(uuid())
  name       String
  courseUrl  String
  level      String
  categoryId String
  isPaid     Boolean          @default(false)
  isPending  Boolean          @default(false)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  category   Category         @relation("CourseToCategory", fields: [categoryId], references: [id])
  categories CourseCategory[]
}

model Category {
  id             String           @id @default(uuid())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  courses        Course[]         @relation("CourseToCategory")
  courseCategory CourseCategory[]
  posts          Post[]
}

model CourseCategory {
  courseId   String
  categoryId String
  course     Course   @relation(fields: [courseId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([courseId, categoryId])
}

model Note {
  id        String   @id @default(uuid())
  title     String
  content   String?
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Event {
  id           String   @id @default(uuid())
  title        String
  description  String
  specialGuest String?
  date         DateTime
  location     String
  externalUrl  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Classroom {
  id          String            @id @default(uuid())
  title       String            @unique
  modules     ClassroomModule[]
  permissions Roles[]           @default([])
  createdAt   DateTime          @default(now())
}

model ClassroomModule {
  id          String    @id @default(uuid())
  title       String
  fileUrl     String?
  videos      Video[]
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String
}

model Video {
  id                String           @id @default(uuid())
  title             String
  description       String?
  url               String
  comments          Comment[]
  createdAt         DateTime         @default(now())
  classroomModule   ClassroomModule? @relation(fields: [classroomModuleId], references: [id])
  classroomModuleId String?
  attachments       Attachment[]
  order             Int?
}

model Attachment {
  id   String @id @default(uuid())
  name String
  type String
  size Int
  url  String

  videoId String
  video   Video  @relation(fields: [videoId], references: [id])
}

model Post {
  id                      String   @id @default(uuid())
  title                   String
  content                 Json
  isPinned                Boolean? @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  discordWebhookMessageID String?
  category                Category @relation(fields: [categoryId], references: [id])
  categoryId              String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  comments Comment[]
  likes    Like[]
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  video   Video?  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String?

  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  likes     CommentLike[]
  commentId String?
}

model Like {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
}

model CommentLike {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([userId, commentId])
}
